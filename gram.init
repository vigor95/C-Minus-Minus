std::string gram_init[]={
 "<translation_unit> ::= <external_declaration>" ,
 "<translation_unit> ::= <translation_unit> <external_declaration>" ,
 "<external_declaration> ::= <function_definition>" ,
 "<external_declaration> ::= <declaration>" ,
 "<function_definition> ::= <declaration_specifiers> <declarator> <declaration_list> <compound_statement>" ,
 "<function_definition> ::= <declaration_specifiers> <declarator> <compound_statement>" ,
 "<function_definition> ::= <declarator> <declaration_list> <compound_statement>" ,
 "<function_definition> ::= <declarator> <compound_statement>" ,
 "<declaration_list> ::= <declaration>" ,
 "<declaration_list> ::= <declaration_list> <declaration>" ,
 "<declaration> ::= <declaration_specifiers> ;" ,
 "<declaration> ::= <declaration_specifiers> <init_declarator_list> ;" ,
 "<declaration_specifiers> ::= <storage_class_specifier>" ,
 "<declaration_specifiers> ::= <declaration_specifiers> <storage_class_specifier>" ,
 "<declaration_specifiers> ::= <type_specifier>" ,
 "<declaration_specifiers> ::= <declaration_specifiers> <type_specifier>" ,
 "<declaration_specifiers> ::= <type_qualifier>" ,
 "<declaration_specifiers> ::= <declaration_specifiers> <type_qualifier>" ,
 "<specifier_qualifier_list> ::= <specifier_qualifier_list> <type_specifier>" ,
 "<specifier_qualifier_list> ::= <type_specifier>" ,
 "<specifier_qualifier_list> ::= <specifier_qualifier_list> <type_qualifier>" ,
 "<specifier_qualifier_list> ::= <type_qualifier>" ,
 "<type_qualifier_list> ::= <type_qualifier>" ,
 "<type_qualifier_list> ::= <type_qualifier_list> <type_qualifier>" ,
 "<type_qualifier> ::= const" ,
 "<type_qualifier> ::= volatile" ,
 "<storage_class_specifier> ::= typedef" ,
 "<storage_class_specifier> ::= extern" ,
 "<storage_class_specifier> ::= static" ,
 "<storage_class_specifier> ::= auto" ,
 "<storage_class_specifier> ::= register" ,
 "<type_specifier> ::= void" ,
 "<type_specifier> ::= char" ,
 "<type_specifier> ::= short" ,
 "<type_specifier> ::= int" ,
 "<type_specifier> ::= long" ,
 "<type_specifier> ::= float" ,
 "<type_specifier> ::= double" ,
 "<type_specifier> ::= signed" ,
 "<type_specifier> ::= unsigned" ,
 "<type_specifier> ::= <struct_or_union_specifier>" ,
 "<type_specifier> ::= <enum_specifier>" ,
 "<type_specifier> ::= TYPE_NAME" ,
 "<struct_or_union_specifier> ::= <struct_or_union> identifier { <struct_declaration_list> }" ,
 "<struct_or_union_specifier> ::= <struct_or_union> { <struct_declaration_list> }" ,
 "<struct_or_union_specifier> ::= <struct_or_union> identifier" ,
 "<struct_or_union> ::= struct" ,
 "<struct_or_union> ::= union" ,
 "<struct_declaration_list> ::= <struct_declaration>" ,
 "<struct_declaration_list> ::= <struct_declaration_list> <struct_declaration>" ,
 "<struct_declaration> ::= <specifier_qualifier_list> <struct_declarator_list> ;" ,
 "<struct_declarator_list> ::= <struct_declarator>" ,
 "<struct_declarator_list> ::= <struct_declarator_list> , <struct_declarator>" ,
 "<struct_declarator> ::= <declarator>" ,
 "<struct_declarator> ::= : <constant_expression>" ,
 "<struct_declarator> ::= <declarator> : <constant_expression>" ,
 "<enum_specifier> ::= enum { <enumerator_list> }" ,
 "<enum_specifier> ::= enum identifier { <enumerator_list> }" ,
 "<enum_specifier> ::= enum identifier" ,
 "<enumerator_list> ::= <enumerator>" ,
 "<enumerator_list> ::= <enumerator_list> , <enumerator>" ,
 "<enumerator> ::= identifier" ,
 "<enumerator> ::= identifier = <constant_expression>" ,
 "<init_declarator_list> ::= <init_declarator>" ,
 "<init_declarator_list> ::= <init_declarator_list> , <init_declarator>" ,
 "<init_declarator> ::= <declarator>" ,
 "<init_declarator> ::= <declarator> = <initializer>" ,
 "<initializer_list> ::= <initializer>" ,
 "<initializer_list> ::= <initializer_list> , <initializer>" ,
 "<initializer> ::= <assignment_expression>" ,
 "<initializer> ::= { <initializer_list> }" ,
 "<initializer> ::= { <initializer_list> , }" ,
 "<parameter_type_list> ::= <parameter_list>" ,
 "<parameter_type_list> ::= <parameter_list> , ..." ,
 "<parameter_list> ::= <parameter_declaration>" ,
 "<parameter_list> ::= <parameter_list> , <parameter_declaration>" ,
 "<parameter_declaration> ::= <declaration_specifiers> <declarator>" ,
 "<parameter_declaration> ::= <declaration_specifiers> <abstract_declarator>" ,
 "<parameter_declaration> ::= <declaration_specifiers>" ,
 "<identifier_list> ::= identifier" ,
 "<identifier_list> ::= <identifier_list> , identifier" ,
 "<type_name> ::= <specifier_qualifier_list>" ,
 "<type_name> ::= <specifier_qualifier_list> <abstract_declarator>" ,
 "<abstract_declarator> ::= <pointer>" ,
 "<abstract_declarator> ::= <direct_abstract_declarator>" ,
 "<abstract_declarator> ::= <pointer> <direct_abstract_declarator>" ,
 "<direct_abstract_declarator> ::= ( <abstract_declarator> )" ,
 "<direct_abstract_declarator> ::= [ ]" ,
 "<direct_abstract_declarator> ::= [ <constant_expression> ]" ,
 "<direct_abstract_declarator> ::= <direct_abstract_declarator> [ ]" ,
 "<direct_abstract_declarator> ::= <direct_abstract_declarator> [ <constant_expression> ]" ,
 "<direct_abstract_declarator> ::= ( )" ,
 "<direct_abstract_declarator> ::= ( <parameter_type_list> )" ,
 "<direct_abstract_declarator> ::= <direct_abstract_declarator> ( )" ,
 "<direct_abstract_declarator> ::= <direct_abstract_declarator> ( <parameter_type_list> )" ,
 "<declarator> ::= <pointer> <direct_declarator>" ,
 "<declarator> ::= <direct_declarator>" ,
 "<direct_declarator> ::= identifier" ,
 "<direct_declarator> ::= ( <declarator> )" ,
 "<direct_declarator> ::= <direct_declarator> [ <constant_expression> ]" ,
 "<direct_declarator> ::= <direct_declarator> [ ]" ,
 "<direct_declarator> ::= <direct_declarator> ( <parameter_type_list> )" ,
 "<direct_declarator> ::= <direct_declarator> ( <identifier_list> )" ,
 "<direct_declarator> ::= <direct_declarator> ( )" ,
 "<pointer> ::= *" ,
 "<pointer> ::= * <type_qualifier_list>" ,
 "<pointer> ::= * <pointer>" ,
 "<pointer> ::= * <type_qualifier_list> <pointer>" ,
 "<statement> ::= <labeled_statement>" ,
 "<statement> ::= <compound_statement>" ,
 "<statement> ::= <expression_statement>" ,
 "<statement> ::= <selection_statement>" ,
 "<statement> ::= <iteration_statement>" ,
 "<statement> ::= <jump_statement>" ,
 "<labeled_statement> ::= identifier : <statement>" ,
 "<labeled_statement> ::= case <constant_expression> : <statement>" ,
 "<labeled_statement> ::= default : <statement>" ,
 "<compound_statement> ::= { }" ,
 "<compound_statement> ::= { <statement_list> }" ,
 "<compound_statement> ::= { <declaration_list> }" ,
 "<compound_statement> ::= { <declaration_list> <statement_list> }" ,
 "<statement_list> ::= <statement>" ,
 "<statement_list> ::= <statement_list> <statement>" ,
 "<expression_statement> ::= ;" ,
 "<expression_statement> ::= <expression> ;" ,
 "<selection_statement> ::= if ( <expression> ) <statement>" ,
 "<selection_statement> ::= if ( <expression> ) <statement> else <statement>" ,
 "<selection_statement> ::= switch ( <expression> ) <statement>" ,
 "<iteration_statement> ::= while ( <expression> ) <statement>" ,
 "<iteration_statement> ::= do <statement> while ( <expression> ) ;" ,
 "<iteration_statement> ::= for ( <expression_statement> <expression_statement> ) <statement>" ,
 "<iteration_statement> ::= for ( <expression_statement> <expression_statement> <expression> ) <statement>" ,
 "<jump_statement> ::= goto identifier ;" ,
 "<jump_statement> ::= continue ;" ,
 "<jump_statement> ::= break ;" ,
 "<jump_statement> ::= return ;" ,
 "<jump_statement> ::= return <expression> ;" ,
 "<expression> ::= <assignment_expression>" ,
 "<expression> ::= <expression> , <assignment_expression>" ,
 "<assignment_expression> ::= <conditional_expression>" ,
 "<assignment_expression> ::= <unary_expression> <assignment_operator> <assignment_expression>" ,
 "<assignment_operator> ::= =" ,
 "<assignment_operator> ::= *=" ,
 "<assignment_operator> ::= /=" ,
 "<assignment_operator> ::= %=" ,
 "<assignment_operator> ::= +=" ,
 "<assignment_operator> ::= -=" ,
 "<assignment_operator> ::= <<=" ,
 "<assignment_operator> ::= >>=" ,
 "<assignment_operator> ::= &=" ,
 "<assignment_operator> ::= ^=" ,
 "<assignment_operator> ::= |=" ,
 "<constant_expression> ::= <conditional_expression>" ,
 "<conditional_expression> ::= <logical_or_expression>" ,
 "<conditional_expression> ::= <logical_or_expression> ? <expression> : <conditional_expression>" ,
 "<logical_or_expression> ::= <logical_and_expression>" ,
 "<logical_or_expression> ::= <logical_or_expression> || <logical_and_expression>" ,
 "<logical_and_expression> ::= <inclusive_or_expression>" ,
 "<logical_and_expression> ::= <logical_and_expression> && <inclusive_or_expression>" ,
 "<inclusive_or_expression> ::= <exclusive_or_expression>" ,
 "<inclusive_or_expression> ::= <inclusive_or_expression> | <exclusive_or_expression>" ,
 "<exclusive_or_expression> ::= <and_expression>" ,
 "<exclusive_or_expression> ::= <exclusive_or_expression> ^ <and_expression>" ,
 "<and_expression> ::= <equality_expression>" ,
 "<and_expression> ::= <and_expression> & <equality_expression>" ,
 "<equality_expression> ::= <relational_expression>" ,
 "<equality_expression> ::= <equality_expression> == <relational_expression>" ,
 "<equality_expression> ::= <equality_expression> != <relational_expression>" ,
 "<relational_expression> ::= <shift_expression>" ,
 "<relational_expression> ::= <relational_expression> < <shift_expression>" ,
 "<relational_expression> ::= <relational_expression> > <shift_expression>" ,
 "<relational_expression> ::= <relational_expression> <= <shift_expression>" ,
 "<relational_expression> ::= <relational_expression> >= <shift_expression>" ,
 "<shift_expression> ::= <additive_expression>" ,
 "<shift_expression> ::= <shift_expression> << <additive_expression>" ,
 "<shift_expression> ::= <shift_expression> >> <additive_expression>" ,
 "<additive_expression> ::= <multiplicative_expression>" ,
 "<additive_expression> ::= <additive_expression> + <multiplicative_expression>" ,
 "<additive_expression> ::= <additive_expression> - <multiplicative_expression>" ,
 "<multiplicative_expression> ::= <cast_expression>" ,
 "<multiplicative_expression> ::= <multiplicative_expression> * <cast_expression>" ,
 "<multiplicative_expression> ::= <multiplicative_expression> / <cast_expression>" ,
 "<multiplicative_expression> ::= <multiplicative_expression> % <cast_expression>" ,
 "<cast_expression> ::= <unary_expression>" ,
 "<cast_expression> ::= ( <type_name> ) <cast_expression>" ,
 "<unary_expression> ::= <postfix_expression>" ,
 "<unary_expression> ::= ++ <unary_expression>" ,
 "<unary_expression> ::= -- <unary_expression>" ,
 "<unary_expression> ::= <unary_operator> <cast_expression>" ,
 "<unary_expression> ::= sizeof <unary_expression>" ,
 "<unary_expression> ::= sizeof ( <type_name> )" ,
 "<unary_operator> ::= &" ,
 "<unary_operator> ::= *" ,
 "<unary_operator> ::= +" ,
 "<unary_operator> ::= -" ,
 "<unary_operator> ::= ~" ,
 "<unary_operator> ::= !" ,
 "<argument_expression_list> ::= <assignment_expression>" ,
 "<argument_expression_list> ::= <argument_expression_list> , <assignment_expression>" ,
 "<postfix_expression> ::= <primary_expression>" ,
 "<postfix_expression> ::= <postfix_expression> [ <expression> ]" ,
 "<postfix_expression> ::= <postfix_expression> ( )" ,
 "<postfix_expression> ::= <postfix_expression> ( <argument_expression_list> )" ,
 "<postfix_expression> ::= <postfix_expression> . identifier" ,
 "<postfix_expression> ::= <postfix_expression> -> identifier" ,
 "<postfix_expression> ::= <postfix_expression> ++" ,
 "<postfix_expression> ::= <postfix_expression> --" ,
 "<primary_expression> ::= identifier" ,
 "<primary_expression> ::= constant" ,
 "<primary_expression> ::= string_literal" ,
 "<primary_expression> ::= ( <expression> )" ,
 ""}
 ;
